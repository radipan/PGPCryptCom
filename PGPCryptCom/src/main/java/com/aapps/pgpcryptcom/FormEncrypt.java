/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aapps.pgpcryptcom;

import Encryptor.EncryptionHelper;
import static Encryptor.EncryptionHelper.EncryptForMe;
import static Encryptor.EncryptionHelper.EncryptForMeAndSign;
import static Encryptor.EncryptionHelper.EncryptForOther;
import static Encryptor.EncryptionHelper.EncryptForOtherAndSign;
import static Encryptor.EncryptionHelper.Sign;

import Encryptor.KeyModifier;
import Encryptor.PrivateKeyLocalizer;
import Encryptor.PublicKeyLocalizer;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.filechooser.FileSystemView;
import org.apache.commons.io.FileUtils;
import org.bouncycastle.openpgp.PGPException;

/**
 *
 * @author adipu
 */
public class FormEncrypt extends javax.swing.JFrame {

    
    private List<PrivateKeyLocalizer> privKeys;
    private List<PublicKeyLocalizer> pubKeys;
    private File fileToEncrypt;
    private File directory = FileSystemView.getFileSystemView().getDefaultDirectory();
    
    /**
     * Creates new form FormEncrypt
     */
    public FormEncrypt(List<PrivateKeyLocalizer> privKeys, List<PublicKeyLocalizer> pubKeys, File file) {
        this.privKeys = privKeys;
        this.pubKeys = pubKeys;
        this.fileToEncrypt = file;
        
        initComponents();
        populateEncryptComboBox();
        populateSignComboBox();
        jTextFieldPath.setText(directory.getPath());
    }

    private PrivateKeyLocalizer getKeyInfo(int i)
    {
        var kInfo = privKeys.get(i);
        return kInfo;
    }
    
    private PublicKeyLocalizer getPubKeyInfo(int i)
    {
        var kInfo = pubKeys.get(i);
        return kInfo;
    }
    
    private void populateEncryptComboBox()
    {
        
        for (PublicKeyLocalizer kInfo : pubKeys)
        {
            jComboBoxEncrypt.addItem(kInfo.getName() + " " + kInfo.getKeyId());
        }
        for (PrivateKeyLocalizer kInfo : privKeys)
        {
            jComboBoxEncrypt.addItem(kInfo.getName() + " " + kInfo.getKeyId());
        }
            
    }
    
    private void populateSignComboBox()
    {
        
        for (PrivateKeyLocalizer kInfo : privKeys)
        {
            jComboBoxSign.addItem(kInfo.getName() + " " + kInfo.getKeyId());
        }
            
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxEncrypt = new javax.swing.JComboBox<>();
        jCheckBoxSign = new javax.swing.JCheckBox();
        jButtonCancel = new javax.swing.JButton();
        jButtonEncrypt = new javax.swing.JButton();
        jTextFieldPath = new javax.swing.JTextField();
        jCheckEnc = new javax.swing.JCheckBox();
        jComboBoxSign = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButtonBrowse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jCheckBoxSign.setText("Sign using:");
        jCheckBoxSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSignActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");

        jButtonEncrypt.setText("Encrypt file");
        jButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptActionPerformed(evt);
            }
        });

        jCheckEnc.setSelected(true);
        jCheckEnc.setText("Encrypt for:");
        jCheckEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckEncActionPerformed(evt);
            }
        });

        jLabel1.setText("Destination Folder:");

        jButtonBrowse.setText("Browse");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBoxSign)
                            .addComponent(jCheckEnc))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxSign, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBrowse)))))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckEnc))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxSign)
                    .addComponent(jComboBoxSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonEncrypt))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        JFileChooser directoryChoose = new JFileChooser();
        directoryChoose.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //directoryChoose.setFileFilter(filter);
        if (directoryChoose.showDialog(this, "Select Folder") == JFileChooser.APPROVE_OPTION)
        {
            this.directory = directoryChoose.getSelectedFile();
            jTextFieldPath.setText(directory.getPath());
        }
            
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptActionPerformed
        // TODO add your handling code here:
        
        //if signing, display passphrase prompt
        
        if (jCheckBoxSign.isSelected())
        {
            JPanel panel = new JPanel();
            JLabel label = new JLabel("Passphrase: ");
            JPasswordField passField = new JPasswordField(30);
            panel.add(label);
            panel.add(passField);

            String[] options = {"OK", "Cancel"};
            int option = JOptionPane.showOptionDialog(this, panel,
                    "Passphrase", JOptionPane.NO_OPTION,
                    JOptionPane.PLAIN_MESSAGE, null, options, options[1]);
            if (option == 0)
            {
               if (jCheckEnc.isSelected())
               {
                   if (jComboBoxEncrypt.getSelectedIndex() < pubKeys.size())
                   {
                       PublicKeyLocalizer kInfo = getPubKeyInfo(jComboBoxEncrypt.getSelectedIndex());
                       PrivateKeyLocalizer kInfoSign = getKeyInfo(jComboBoxSign.getSelectedIndex());
                       
                       byte[] encBytes = null;
                       try {
                           encBytes = EncryptForOtherAndSign(fileToEncrypt.getPath(), kInfo, kInfoSign, String.valueOf(passField.getPassword()));
                       } catch (PGPException ex) {
                           Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (IOException ex) {
                           Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       
                       
                        try {
                            FileUtils.writeByteArrayToFile(new File(directory.getPath() + "\\" + fileToEncrypt.getName() + ".pgp"), encBytes);
                            //log write success
                        } catch (IOException e) {
                            //log
                            System.out.println("An error occurred.");
                            e.printStackTrace();
                        }
                   }
                   else 
                   {
                       PrivateKeyLocalizer kInfo = getKeyInfo(jComboBoxEncrypt.getSelectedIndex() + pubKeys.size());
                       PrivateKeyLocalizer kInfoSign = getKeyInfo(jComboBoxSign.getSelectedIndex());
                       
                       byte[] encBytes = null;
                       try {
                           encBytes = EncryptForMeAndSign(fileToEncrypt.getPath(), kInfo, kInfoSign, String.valueOf(passField.getPassword()));
                       } catch (PGPException ex) {
                           Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                       } catch (IOException ex) {
                           Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       
                       
                        try {
                            FileUtils.writeByteArrayToFile(new File(directory.getPath() + "\\" + fileToEncrypt.getName() + ".pgp"), encBytes);
                            //log write success
                        } catch (IOException e) {
                            //log
                            System.out.println("An error occurred.");
                            e.printStackTrace();
                        }
                   }
               }
               else
               {
                   // sign
                    PrivateKeyLocalizer kInfo = getKeyInfo(jComboBoxEncrypt.getSelectedIndex());

                    byte[] encBytes = null;
                    try {
                       encBytes = Sign(fileToEncrypt.getPath(), kInfo, String.valueOf(passField.getPassword()));
                    } catch (PGPException ex) {
                       Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                       Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    try {
                        FileUtils.writeByteArrayToFile(new File(directory.getPath() + "\\" + fileToEncrypt.getName() + ".pgp"), encBytes);
                        //log write success
                    } catch (IOException e) {
                        //log
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
               }
            }
        }
        else if (jCheckEnc.isSelected())
        {
            //enc
            if (jComboBoxEncrypt.getSelectedIndex() < pubKeys.size())
               {
                   PublicKeyLocalizer kInfo = getPubKeyInfo(jComboBoxEncrypt.getSelectedIndex());

                   byte[] encBytes = null;
                   try {
                       encBytes = EncryptForOther(fileToEncrypt.getPath(), kInfo);
                   } catch (PGPException ex) {
                       Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                   } catch (IOException ex) {
                       Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                   }


                    try {
                        FileUtils.writeByteArrayToFile(new File(directory.getPath() + "\\" + fileToEncrypt.getName() + ".pgp"), encBytes);
                        //log write success
                    } catch (IOException e) {
                        //log
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
               }
               else 
               {
                   PrivateKeyLocalizer kInfo = getKeyInfo(jComboBoxEncrypt.getSelectedIndex() + pubKeys.size());

                   byte[] encBytes = null;
                   try {
                       encBytes = EncryptForMe(fileToEncrypt.getPath(), kInfo);
                   } catch (PGPException ex) {
                       Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                   } catch (IOException ex) {
                       Logger.getLogger(FormEncrypt.class.getName()).log(Level.SEVERE, null, ex);
                   }


                    try {
                        FileUtils.writeByteArrayToFile(new File(directory.getPath() + "\\" + fileToEncrypt.getName() + ".pgp"), encBytes);
                        //log write success
                    } catch (IOException e) {
                        //log
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                    }
               }

        }
        //
    }//GEN-LAST:event_jButtonEncryptActionPerformed

    private void checkOptions()
    {
        if (!jCheckBoxSign.isSelected() && !jCheckEnc.isSelected())
        {
            jButtonEncrypt.setEnabled(false);
        }
        else
        {
            jButtonEncrypt.setEnabled(true);
        }
    }
    
    private void jCheckEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckEncActionPerformed
        checkOptions();
    }//GEN-LAST:event_jCheckEncActionPerformed

    private void jCheckBoxSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSignActionPerformed
        checkOptions();
    }//GEN-LAST:event_jCheckBoxSignActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FormEncrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FormEncrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FormEncrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FormEncrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FormEncrypt().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonEncrypt;
    private javax.swing.JCheckBox jCheckBoxSign;
    private javax.swing.JCheckBox jCheckEnc;
    private javax.swing.JComboBox<String> jComboBoxEncrypt;
    private javax.swing.JComboBox<String> jComboBoxSign;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextFieldPath;
    // End of variables declaration//GEN-END:variables
}
