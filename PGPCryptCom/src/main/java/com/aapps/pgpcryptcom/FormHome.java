/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aapps.pgpcryptcom;

import Configuration.Parameters;
import Encryptor.Decryptor;
import Encryptor.KeyGenerator;
import Encryptor.KeyModifier;
import Encryptor.PrivateKeyLocalizer;
import Encryptor.PublicKeyLocalizer;
import InputOutput.FileManager;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FileUtils;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.pgpainless.PGPainless;

/**
 *
 * @author adipu
 */
public class FormHome extends javax.swing.JFrame {
    
    private List<PrivateKeyLocalizer> privKeys;
    private List<PublicKeyLocalizer> pubKeys;
    /**
     * Creates new form FormHome
     */
    public FormHome() {
        initComponents();
        privKeys = new ArrayList<PrivateKeyLocalizer>();
        pubKeys = new ArrayList<PublicKeyLocalizer>();

        jTablePrivKeys.setAutoCreateRowSorter(true);
        jTableImportedKeys.setAutoCreateRowSorter(true);
        //populateKeyLists();
        populatePrivKeyTable();
        populatePubKeyTable();
    }
    
    private void populatePrivKeyTable()
    {
        privKeys = new ArrayList<PrivateKeyLocalizer>();
        File folder = new File(Parameters.Constants.RootPathForPrivKeys);
        DefaultTableModel model = (DefaultTableModel) jTablePrivKeys.getModel();
        model.setRowCount(0);
        for (File fileEntry : folder.listFiles()) {
            //list.add(fileEntry.getName());
            PrivateKeyLocalizer key = new PrivateKeyLocalizer(fileEntry.getPath());
            if (key.getKeyRing() != null)
            {
                privKeys.add(key);
                model.addRow(new Object[]{key.getName(), key.getCreationDate(), key.getExpDate(), key.getKeyId()});
            }
        }
    }
    
    private void populatePubKeyTable()
    {
        pubKeys = new ArrayList<PublicKeyLocalizer>();
        File folder = new File(Parameters.Constants.RootPathForPubKeys);
        DefaultTableModel model = (DefaultTableModel) jTableImportedKeys.getModel();
        model.setRowCount(0);
        for (File fileEntry : folder.listFiles()) {
            //list.add(fileEntry.getName());
            PublicKeyLocalizer key = new PublicKeyLocalizer(fileEntry.getPath());
            if (key.getKeyRing() != null)
            {
                pubKeys.add(key);
                model.addRow(new Object[]{key.getName(), key.getCreationDate(), key.getExpDate(), key.getKeyId()});
            }
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablePrivKeys = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableImportedKeys = new javax.swing.JTable();
        jButtonGenerate = new javax.swing.JButton();
        jButtonExport = new javax.swing.JButton();
        jButtonImportPriv = new javax.swing.JButton();
        jButtonImportPub = new javax.swing.JButton();
        jButtonEncrypt = new javax.swing.JButton();
        jButtonDecrypt = new javax.swing.JButton();
        jButtonDecrypt1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTablePrivKeys.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Creation Date", "Expiration Date", "Key-ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePrivKeys.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePrivKeysMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTablePrivKeys);

        jTabbedPane1.addTab("Private Keys", jScrollPane3);

        jTableImportedKeys.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Creation Date", "Expiration Date", "Key Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableImportedKeys);

        jTabbedPane1.addTab("Public Keys", jScrollPane4);

        jButtonGenerate.setText("Generate");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jButtonExport.setText("Export key");

        jButtonImportPriv.setText("Import private key");
        jButtonImportPriv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportPrivActionPerformed(evt);
            }
        });

        jButtonImportPub.setText("Import public key");
        jButtonImportPub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportPubActionPerformed(evt);
            }
        });

        jButtonEncrypt.setText("Encrypt...");
        jButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptActionPerformed(evt);
            }
        });

        jButtonDecrypt.setText("Decrypt...");
        jButtonDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptActionPerformed(evt);
            }
        });

        jButtonDecrypt1.setText("Refresh");
        jButtonDecrypt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecrypt1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExport, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImportPriv, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImportPub, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(jButtonEncrypt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDecrypt1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonImportPriv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonImportPub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEncrypt)
                    .addComponent(jButtonDecrypt)
                    .addComponent(jButtonDecrypt1))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private PrivateKeyLocalizer getKeyInfoById(String id)
    {
        for (PrivateKeyLocalizer kInfo : privKeys)
        {
            String kId = kInfo.getKeyId();
            if (kId.equals(id))
                return kInfo;
        }
        return null;
    }
    
    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
//        FormGenerate fg = new FormGenerate();
//        fg.setVisible(rootPaneCheckingEnabled);
        DialogGenerate dg = new DialogGenerate(this, true);
        dg.setVisible(true);
        dg.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    private void jButtonImportPrivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportPrivActionPerformed
        JFileChooser openDialog = new JFileChooser();
        if (openDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            new KeyGenerator(openDialog.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_jButtonImportPrivActionPerformed

    private void jButtonImportPubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportPubActionPerformed
        JFileChooser openDialog = new JFileChooser();
        if (openDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            String strPubKeyRead = null;
            PGPPublicKeyRing pubKey = null;
            try 
            {
                strPubKeyRead = Files.readString(openDialog.getSelectedFile().toPath());
            }
            catch(IOException e){
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            try {
                pubKey = PGPainless.readKeyRing().publicKeyRing(strPubKeyRead);
            } catch (IOException ex) {
                Logger.getLogger(FormHome.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            String keyId = PGPainless.inspectKeyRing(pubKey).getFingerprint().prettyPrint(); 
            String keyFileName = PGPainless.inspectKeyRing(pubKey).getPrimaryUserId().replace('<', '-').replace('>', '-') + " " + keyId +".pgp";
            
            try {
                FileWriter writer = new FileWriter("C:\\PGPCryptCom\\Keys\\PubKeys\\" + keyFileName);
                writer.write(PGPainless.asciiArmor(pubKey));
                writer.close();
                //log write success
            } catch (IOException e) {
                //log
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            
        }
    }//GEN-LAST:event_jButtonImportPubActionPerformed

    private void jButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptActionPerformed
        JFileChooser openDialog = new JFileChooser();
        if (openDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            FormEncrypt fe = new FormEncrypt(privKeys, pubKeys, openDialog.getSelectedFile());
            fe.setVisible(true);
        }
    }//GEN-LAST:event_jButtonEncryptActionPerformed

    private void jButtonDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptActionPerformed
        JFileChooser openDialog = new JFileChooser();
        if (openDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            byte[] encData = null;
            byte[] decData = null;
                        
            try 
            {
                encData = Files.readAllBytes(openDialog.getSelectedFile().toPath());
            }
            catch(IOException e){
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            
            Decryptor decryptor = null;
            try {
                decryptor = new Decryptor(encData, pubKeys, privKeys);
            } catch (IOException ex) {
                Logger.getLogger(FormHome.class.getName()).log(Level.SEVERE, null, ex);
                
                JOptionPane.showMessageDialog(this, "Invalid file!");
                return;
            }
            
            if (decryptor.isDataSignedOnly())
            {
                try {
                    decData = decryptor.tryVerify();
                } catch (PGPException ex) {
                    Logger.getLogger(FormHome.class.getName()).log(Level.SEVERE, null, ex);
                    
                } catch (IOException ex) {
                    Logger.getLogger(FormHome.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (decData != null)
                {
                    String keyId;
                    if (decryptor.getKeyUsedForVerifyingPriv() != null)
                    {
                        keyId = decryptor.getKeyUsedForVerifyingPriv().getKeyId();
                    }
                    else
                    {
                        keyId = decryptor.getKeyUsedForVerifyingPub().getKeyId();
                    }
                    JOptionPane.showMessageDialog(this, "File verified succesfully for " + keyId, "Success", JOptionPane.PLAIN_MESSAGE);
                    JFileChooser saveDialog = new JFileChooser();
                    if (saveDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
                    {
                        try {
                            FileUtils.writeByteArrayToFile(saveDialog.getSelectedFile(), decData);
                            //log write success
                        } catch (IOException e) {
                            //log
                            System.out.println("An error occurred.");
                            e.printStackTrace();
                        }
                    }
                    else 
                    {
                        return;
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "No key found for verifying file!", "Failure", JOptionPane.PLAIN_MESSAGE);
                }
                
            }
            else if (decryptor.isEncrypted()) 
            {
                if (!decryptor.findDecryptKey())
                {   
                    JOptionPane.showMessageDialog(this, "No key found for decrypting file!", "Failure", JOptionPane.PLAIN_MESSAGE);
                    return;
                }
                
                JPanel panel = new JPanel();
                JLabel label = new JLabel("Passphrase: ");
                JPasswordField passField = new JPasswordField(30);
                panel.add(label);
                panel.add(passField);

                String[] options = {"OK", "Cancel"};
                int option = JOptionPane.showOptionDialog(this, panel,
                        "Passphrase", JOptionPane.NO_OPTION,
                        JOptionPane.PLAIN_MESSAGE, null, options, options[1]);
                if (option == 0)
                {
                    try {
                        decData = decryptor.TryDecryptAndVerify(passField.getPassword());
                    } catch (PGPException ex) {
                        Logger.getLogger(FormHome.class.getName()).log(Level.SEVERE, null, ex);
                        
                        JOptionPane.showMessageDialog(this, "Invalid passphrase", "Error", JOptionPane.PLAIN_MESSAGE);
                        return;
                    } catch (IOException ex) {
                        Logger.getLogger(FormHome.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Invalid passphrase", "Error", JOptionPane.PLAIN_MESSAGE);
                        return;
                    }
                    
                    String keyId = null;
                    String keyIdDec = decryptor.getKeyUsedForDecrypting().getKeyId();
                    if (decryptor.getKeyUsedForVerifyingPriv() != null)
                    {
                        keyId = decryptor.getKeyUsedForVerifyingPriv().getKeyId();
                    }
                    else if (decryptor.getKeyUsedForVerifyingPub() != null)
                    {
                        keyId = decryptor.getKeyUsedForVerifyingPub().getKeyId();
                    }
                    
                    if (keyId != null)
                    {
                        JOptionPane.showMessageDialog(this, "File decrypted using " + keyIdDec + " and verified succesfully for " + keyId,
                                "Success", JOptionPane.PLAIN_MESSAGE);
                        JFileChooser saveDialog = new JFileChooser();
                        if (saveDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
                        {
                            try {
                                FileUtils.writeByteArrayToFile(saveDialog.getSelectedFile(), decData);
                                //log write success
                            } catch (IOException e) {
                                //log
                                System.out.println("An error occurred.");
                                e.printStackTrace();
                            }
                        }
                        else 
                        {
                            return;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "File decrypted using " + keyIdDec + ". Could not verify identity.",
                                "Success", JOptionPane.PLAIN_MESSAGE);
                        JFileChooser saveDialog = new JFileChooser();
                        if (saveDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
                        {
                            try {
                                FileUtils.writeByteArrayToFile(saveDialog.getSelectedFile(), decData);
                                //log write success
                            } catch (IOException e) {
                                //log
                                System.out.println("An error occurred.");
                                e.printStackTrace();
                            }
                        }
                        else 
                        {
                            return;
                        }
                    }
                    
                }
                else
                {
                    return;
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Invalid file!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_jButtonDecryptActionPerformed

    private void jTablePrivKeysMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePrivKeysMouseClicked
        if (evt.getClickCount() == 2)
        {
            //JOptionPane.showMessageDialog(this, jTablePrivKeys.getValueAt(jTablePrivKeys.getSelectedRow(), 3));

            PrivateKeyLocalizer keyInfo = getKeyInfoById((String) jTablePrivKeys.getValueAt(jTablePrivKeys.getSelectedRow(), jTablePrivKeys.getColumn("Key-ID").getModelIndex()));
            FormKeyDetails fk = new FormKeyDetails(keyInfo);
            fk.setVisible(true);
            fk.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_jTablePrivKeysMouseClicked

    private void jButtonDecrypt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecrypt1ActionPerformed
        populatePrivKeyTable();
        populatePubKeyTable();
    }//GEN-LAST:event_jButtonDecrypt1ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FormHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FormHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FormHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FormHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FormHome().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDecrypt;
    private javax.swing.JButton jButtonDecrypt1;
    private javax.swing.JButton jButtonEncrypt;
    private javax.swing.JButton jButtonExport;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JButton jButtonImportPriv;
    private javax.swing.JButton jButtonImportPub;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableImportedKeys;
    private javax.swing.JTable jTablePrivKeys;
    // End of variables declaration//GEN-END:variables
}
